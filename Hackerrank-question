Here is a sample line of code that can be executed in Python:
print("Hello, World!")
You can just as easily store a string as a variable and then print it to stdout:
my_string = "Hello, World!"
print(my_string)
The above code will print Hello, World! on your screen. Try it yourself in the editor below!
Input Format
You do not need to read any input in this challenge.
Output Format
Print Hello, World! to stdout.
Sample Output 0
Hello, World!
--->>if __name__ == '__main__':
    print "Hello, World! "
-----------------------------------------------------------------------------------------------------
Task Given an integer,n , perform the following conditional actions:
If n is odd, print Weird
If n is even and in the inclusive range of 2 to 5, print Not Weird
If n is even and in the inclusive range of 6 to 20, print Weird
If n is even and greater than 20, print Not Weird
Input Format
A single line containing a positive integer,n.
Constraints
1 <= n<= 100
Output Format
Print Weird if the number is weird. Otherwise, print Not Weird.
Sample Input 0
3
Sample Output 0
Weird
Explanation 0
n=3
n is odd and odd numbers are weird, so print Weird.
Sample Input 1
24
Sample Output 1
Not Weird
Explanation 1
n=24
n>20 and n is even, so it is not weird.
--->>#!/bin/python
import math
import os
import random
import re
import sys
if __name__ == '__main__':
    n = int(raw_input().strip())
if n in range(2,6):
    if n%2==0:
        print("Not Weird")
    else:
        print("Weird")
elif n in range(6,21):
    n%2==0
    print("Weird")
elif n>20 and n%2==0:
    print("Not Weird")
else:
    print("Weird")
-------------------------------------------------------------------------------------------------------
Task
The provided code stub reads two integers from STDIN,a and b. Add code to print three lines where:
The first line contains the sum of the two numbers.
The second line contains the difference of the two numbers (first - second).
The third line contains the product of the two numbers.
Example
a=3
b=5
Print the following:
8
-2
15
Input Format
The first line contains the first integer,a.
The second line contains the second integer,b.
Constraints
1<=a<=10^10
1<=b<=10^10
Output Format
Print the three lines as explained above.
Sample Input 0
3
2
Sample Output 0
5
1
6
Explanation 0
3+2=>5
3-2=>1
3*2=>6
--->>if __name__ == '__main__':
    a = int(input())
    b = int(input())
    
    x= a+b
    d= a-b
    e= a*b
     
    print(x);
    print(d);
    print(e);
-----------------------------------------------------------------------------------
Task The provided code stub reads two integers,a and b, from STDIN.
Add logic to print two lines. The first line should contain the result of integer division,a//b. The second line should 
contain the result of float division,a/b.No rounding or formatting is necessary.
Example
a = 3
b = 5
The result of the integer division 3//5=0 .
The result of the float division is 3/5=0.6 .
Print:
0
0.6
Input Format
The first line contains the first integer,a.
The second line contains the second integer,b.
Output Format
Print the two lines as described above.
Sample Input 0
4
3
Sample Output 0
1
1.33333333333
--->>if __name__ == '__main__':
    a = int(input())
    b = int(input())
    
    x=a//b
    y=a/b
    
    print(x)
    print(y)
-------------------------------------------------------------------------------------------
Task The provided code stub reads and integer,n, from STDIN. For all non-negative integers i<n, print i^2 .
Example
The list of non-negative integers that are less than n=3 is [0,1,2]. Print the square of each number on a separate line.
0
1
4
Input Format
The first and only line contains the integer,n.
Constraints
1<=n<=20
Output Format
Print n lines, one corresponding to each i.
Sample Input 0

5
Sample Output 0

0
1
4
9
16
--->>if __name__ == '__main__':
    n = int(input())
    a=0
    for a in range(0,n):
        square=a**2
        print(square)
        a+=1 
 ------------------------------------------------------------------------------------------
 An extra day is added to the calendar almost every four years as February 29, and the day is called a leap day. 
 It corrects the calendar for the fact that our planet takes approximately 365.25 days to orbit the sun. A leap year 
 contains a leap day.
In the Gregorian calendar, three conditions are used to identify leap years:
The year can be evenly divided by 4, is a leap year, unless:
The year can be evenly divided by 100, it is NOT a leap year, unless:
The year is also evenly divisible by 400. Then it is a leap year.
This means that in the Gregorian calendar, the years 2000 and 2400 are leap years, while 1800, 1900, 2100, 2200, 2300 and 2500 
are NOT leap years. Source
Task
Given a year, determine whether it is a leap year. If it is a leap year, return the Boolean True, otherwise return False.
Note that the code stub provided reads from STDIN and passes arguments to the is_leap function. It is only necessary to complete 
the is_leap function.
Input Format
Read year, the year to test.
Constraints
1900<=year<=10^5
Output Format
The function must return a Boolean value (True/False). Output is handled by the provided code stub.
Sample Input 0
1990
Sample Output 0
False
Explanation 0
1990 is not a multiple of 4 hence it's not a leap year.
--->>def is_leap(year):
    leap = False
    yes= True
    # Write your logic here
    if year%400==0 and year%100==0 or year%100!=0 and year%4==0:
        return yes
    else:
        return leap

year = int(input())
----------------------------------------------------------------------------------------------------
The included code stub will read an integer,n, from STDIN.
Without using any string methods, try to print the following:
123...n
Note that "" represents the consecutive values in between.
Example
n=5
Print the string 12345 .
Input Format
The first line contains an integer n.
Constraints
1<=n<=150
Output Format
Print the list of integers from 1 through n as a string, without spaces.
Sample Input 0
3
Sample Output 0
123
--->>if __name__ == '__main__':
    n = int(input())
    
    a=1
    for a in range(1,n+1):
        
        print(a,end='')
---------------------------------------------------------------------------------
The provided code stub will read in a dictionary containing key/value pairs of name:[marks] for a list of students. Print 
the average of the marks array for the student name provided, showing 2 places after the decimal.
Example
marks key:value pairs are
'alpha':[20,30,40]
'beta':[30,50,70]
query_name='beta'
The query_name is 'beta'. beta's average score is .
(30+50+73)/3=50.0
Input Format
The first line contains the integer , the number of students' records. The next  lines contain the names and marks obtained by a 
student, each value separated by a space. The final line contains query_name, the name of a student to query.
Constraints
2<=n<=10
0<marks[i]<100
length of marks arrays = 3
Output Format
Print one line: The average of the marks obtained by the particular student correct to 2 decimal places.
Sample Input 0
3
Krishna 67 68 69
Arjun 70 98 63
Malika 52 56 60
Malika
Sample Output 0
56.00
Explanation 0
Marks for Malika are  whose average is 
{52,56,60} whose average 52+56+60/3=56
Sample Input 1
2
Harsh 25 26.5 28
Anurag 26 28 30
Harsh
Sample Output 1
26.50
--->>if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()
    print("%.2f" %(sum(student_marks[query_name])/len(student_marks[query_name])))  
-----------------------------------------------------------------------------------
Consider a list (list = []). You can perform the following commands:
1.insert i e: Insert integer  at position .
2.print: Print the list.
3.remove e: Delete the first occurrence of integer .
4.append e: Insert integer  at the end of the list.
5.sort: Sort the list.
6.pop: Pop the last element from the list.
7.reverse: Reverse the list.
Initialize your list and read in the value of n followed by n lines of commands where each command will be 
of the 7 types listed above. Iterate through each command in order and perform the corresponding operation on your list.
Example
N=4
append 1
append 2
insert 3 1
print
append 1: Append 1 to the list,[1] .
append 2: Append 2 to the list,[1,2] .
insert 3 1: Insert 3 at index 1,[1,3,2].
: Print the array.
Output:
[1, 3, 2]
Input Format

The first line contains an integer, , denoting the number of commands.
Each line  of the  subsequent lines contains one of the commands described above.

Constraints

The elements added to the list must be integers.
Output Format

For each command of type print, print the list on a new line.

Sample Input 0

12
insert 0 5
insert 1 10
insert 0 6
print
remove 6
append 9
append 1
sort
print
pop
reverse
print
Sample Output 0

[6, 5, 10]
[1, 5, 9, 10]
[9, 5, 1]
--->>import sys
if __name__ == '__main__':
    N = int(input())
my_list = []
inputs = []

for line in sys.stdin:
    inputs.append(line)
    
for item in inputs:
    if item[0:5]=='print':
        print(my_list)
    elif item[0:2]=='in':
        inserts = [s for s in item.split()][1:3] 
        inserts = list(map(int, inserts))
        my_list.insert(inserts[0],inserts[1])
    elif item[0:3] == 'rem':
        inserts = list(map(int,[s for s in item.split()][1]))
        my_list.remove(inserts[0])
    elif item[0:2] == 'ap':
        inserts = list(map(int,[s for s in item.split()][1]))
        my_list.append(inserts[0])
    elif item[0:4]=='sort':
        my_list.sort()
    elif item[0:3]=='pop':
        my_list.pop()
    elif item[0:7]=='reverse':
        my_list.reverse()
-------------------------------------------------------------------------------------------


























